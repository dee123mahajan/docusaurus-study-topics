"use strict";(self.webpackChunkStudy_React_js=self.webpackChunkStudy_React_js||[]).push([[965],{5905:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=t(4848),r=t(8453);const a={sidebar_position:1},s="Data types",l={id:"Javascript/PrimitiveNonPrimitive",title:"Data types",description:"In JavaScript, primitive data types are simple data types that represent single values, while non-primitive data types are more complex and can hold multiple values or other data types. Here's a simplified explanation:",source:"@site/docs/Javascript/PrimitiveNonPrimitive.md",sourceDirName:"Javascript",slug:"/Javascript/PrimitiveNonPrimitive",permalink:"/docs/Javascript/PrimitiveNonPrimitive",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Closures",permalink:"/docs/Javascript/Closures"},next:{title:"Promises",permalink:"/docs/Javascript/Promises"}},o={},p=[{value:"Primitive Data Types:",id:"primitive-data-types",level:2},{value:"Non-primitive Data Types:",id:"non-primitive-data-types",level:2},{value:"Difference",id:"difference",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:"data-types",children:"Data types"}),"\n",(0,n.jsx)(i.p,{children:"In JavaScript, primitive data types are simple data types that represent single values, while non-primitive data types are more complex and can hold multiple values or other data types. Here's a simplified explanation:"}),"\n",(0,n.jsx)(i.h2,{id:"primitive-data-types",children:"Primitive Data Types:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:"Basic building blocks of JavaScript."}),"\n",(0,n.jsx)(i.li,{children:"They store single values directly."}),"\n",(0,n.jsx)(i.li,{children:"Examples: numbers, strings, booleans, null, undefined."}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"non-primitive-data-types",children:"Non-primitive Data Types:"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:"Made up of multiple primitive or non-primitive data types."}),"\n",(0,n.jsx)(i.li,{children:"They are more complex and can store collections of data."}),"\n",(0,n.jsx)(i.li,{children:"Examples: arrays, objects."}),"\n"]}),"\n",(0,n.jsx)(i.h2,{id:"difference",children:"Difference"}),"\n",(0,n.jsxs)(i.ol,{children:["\n",(0,n.jsx)(i.li,{children:"Primitive data types are like individual LEGO blocks, while non-primitive data types are like LEGO sets made up of multiple blocks."}),"\n",(0,n.jsx)(i.li,{children:"Primitive data types are simple and directly store values, while non-primitive data types can store more complex data structures."}),"\n"]}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-bash",children:'// Primitive data types\r\nlet age = 25; // Number\r\nlet name = "John"; // String\r\nlet isStudent = true; // Boolean\r\nlet x = null; // Null\r\nlet y = undefined; // Undefined\r\n\r\n// Non-primitive data types\r\nlet numbers = [1, 2, 3, 4, 5]; // Array\r\nlet person = { name: "Alice", age: 30 }; // Object\r\n\n'})})]})}function c(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,i,t)=>{t.d(i,{R:()=>s,x:()=>l});var n=t(6540);const r={},a=n.createContext(r);function s(e){const i=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(a.Provider,{value:i},e.children)}}}]);