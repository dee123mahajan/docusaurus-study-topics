"use strict";(self.webpackChunkStudy_React_js=self.webpackChunkStudy_React_js||[]).push([[176],{1253:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var r=t(4848),o=t(8453);const a={},s="State and Props",i={id:"react/Stateprops",title:"State and Props",description:"State",source:"@site/docs/react/Stateprops.md",sourceDirName:"react",slug:"/react/Stateprops",permalink:"/docs/react/Stateprops",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Reconcilation , Diffing Algorithm, Virtual DOM",permalink:"/docs/react/Reconcillation"},next:{title:"Class and Functional Components",permalink:"/docs/react/classFunccomponents"}},c={},p=[{value:"State",id:"state",level:2},{value:"Props:",id:"props",level:2},{value:"Key Differences:",id:"key-differences",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"state-and-props",children:"State and Props"}),"\n",(0,r.jsx)(n.h2,{id:"state",children:"State"}),"\n",(0,r.jsx)(n.p,{children:"State represents the local state of a component. It's mutable and can be updated using setState() method. State allows components to manage their data internally and make the component dynamic and interactive."}),"\n",(0,r.jsx)(n.p,{children:"Example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"import React, { useState } from 'react';\r\n\r\nconst Counter = () => {\r\n  const [count, setCount] = useState(0);\r\n\r\n  const increment = () => {\r\n    setCount(count + 1);\r\n  };\r\n\r\n  const decrement = () => {\r\n    setCount(count - 1);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={increment}>Increment</button>\r\n      <button onClick={decrement}>Decrement</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"In this example, count is a piece of state managed by the useState hook. Whenever the buttons are clicked, setCount() updates the state, triggering a re-render of the component with the updated count."}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props:"}),"\n",(0,r.jsx)(n.p,{children:"Props (short for properties) are inputs to a React component. They are passed from parent to child components and are immutable within the child component. Props allow components to be customizable and reusable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'\r\nimport React from \'react\';\r\n\r\nconst Greeting = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>Hello, {props.name}!</h1>\r\n      <p>{props.message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Greeting name="Alice" message="Welcome to React!" />\r\n      <Greeting name="Bob" message="Have a great day!" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"In this example, Greeting component receives name and message props from its parent App component. Each time Greeting is used, it can display a different greeting based on the props passed to it. Props are immutable within the Greeting component, so they cannot be changed from within the component itself."}),"\n",(0,r.jsx)(n.h3,{id:"key-differences",children:"Key Differences:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Mutability: State is mutable and can be updated using setState(), whereas props are immutable and cannot be modified directly within the component."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Scope: State is local to the component where it is defined, while props are passed from parent to child components."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Usage: State is used to manage component-specific data and handle changes internally, while props are used to customize and configure components based on their parent's requirements."}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>i});var r=t(6540);const o={},a=r.createContext(o);function s(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);